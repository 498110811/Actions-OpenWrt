name: Openwrt_x86

on:
  schedule:
    - cron: 0 16 * * *
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: main
  CONFIG_FILE: Openwrt/x86/.config
  DIY_P1_SH: Openwrt/diy-part1.sh
  DIY_P2_SH: Openwrt/diy-part2.sh
  UPLOAD_BIN: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 释放Ubuntu磁盘空间
      uses: coder-xiaomo/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: 加载项目文件
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt update -y
        sudo apt full-upgrade -y
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
        g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
        libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
        libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
        ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
        python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
        upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
        sudo timedatectl set-timezone "$TZ"

    - name: 下载固件源码
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt

    - name: 执行DIY_P1_SH
      run: |
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载config 执行DIY_P2_SH defconfig
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        ./scripts/feeds update -a && ./scripts/feeds install -a
        make defconfig

    - name: 下载安装包
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s

    - name: 查看磁盘使用情况
      if: env.UPLOAD_FIRMWARE == 'true'
      run: df -hT

    - name: 设置文件命名和当前的日期
      working-directory: ./openwrt
      run: |
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "date1=$(date +'%Y.%m.%d-%H.%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        echo "date3=$(date "+%Y年%m月%d日")" >> $GITHUB_ENV

    - name: 上传bin目录文件
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN == 'true'
      with:
        name: bin_${{ env.DEVICE_NAME }}_${{ env.date1 }}
        path: openwrt/bin

    - name: 整理文件到firmware目录
      id: organize
      if: steps.compile.outputs.status == 'success'
      run: | 
        mkdir firmware && find openwrt/bin/targets/*/*/ -maxdepth 1 \
        -name "*squashfs-combined.vmdk" \
        -or -name "*quashfs-combined.img.gz" \
        | xargs -i cp {} ./firmware/
        cp ./openwrt/bin/targets/*/*/config.buildinfo ./firmware/${date1}_${DEVICE_NAME}.config
        cd firmware
        sudo -E apt-get -qq install rename
        rename 's/^/${date1}_${DEVICE_NAME}_/' *.vmdk
        rename 's/^/${date1}_${DEVICE_NAME}_/' *.img.gz
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: 上传firmware目录文件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: firmware_${{ env.DEVICE_NAME }}_${{ env.date1 }}
        path: ${{ env.FIRMWARE }}

    - name: 生成release标签
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      run: |
        echo "release_tag=${date2}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "由衷感谢所有为openwrt无私奉献的大佬们" >> release.txt
        echo "📥 固件下载" >> release.txt

    - name: 发布至release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.date3 }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt

    - name: config文件上传自动更新1
      run : |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
    - name: config文件上传自动更新2
      run: |
        cd $GITHUB_WORKSPACE
        git clone -b main https://github.com/moruiris/Actions-OpenWrt.git main
    - name: config文件上传自动更新3
      env: 
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        cp ./openwrt/.config $GITHUB_WORKSPACE/main/$CONFIG_FILE
        cd $GITHUB_WORKSPACE/main
        if git status --porcelain | grep .; then
          git add .
          git commit -am "update $(date +%Y-%m-%d" "%H:%M:%S)"
          git push --quiet "https://${ACCESS_TOKEN}@github.com/moruiris/Actions-OpenWrt.git" HEAD:main
        else   
          echo "nothing to commit"
          exit 0
        fi || exit 0

    - name: 删除工作流
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 7
        keep_minimum_runs: 0
